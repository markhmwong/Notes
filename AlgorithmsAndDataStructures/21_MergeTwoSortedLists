/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        //reuse existing nodes

        //consider base cases
        //both lists are null
        if (l1 == null && l2 == null) {
            return null;
        }

        if (l1 == null) {
            return l2;
        }

        if (l2 == null) {
            return l1;
        }

        ListNode currNode = new ListNode(0);
        ListNode headNode = currNode;
        while (l1 != null || l2 != null) {
            if (l1 != null && l2 == null) {
                headNode.next = l1;
                break;
            } else if (l2 != null && l1 == null) {
                headNode.next = l2;
                break;
            }

            if (l1 != null && l2 != null) {

                if (l1.val < l2.val) {
                    headNode.next = l1;
                    l1 = l1.next;
                } else {
                    headNode.next = l2;
                    l2 = l2.next;
                }
            }
            headNode = headNode.next;
        }

        return currNode.next;
    }
}

/*
Time complexity
O (m + n) m and n respresents the length of the lists as it's possible the lists are not the same depth. As we only traverse each list through one pass, we add the size of each list.

Space complexity.
O(m + n)
*/
